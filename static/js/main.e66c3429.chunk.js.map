{"version":3,"sources":["App.js","Algorithm/bubblesort.js","serviceWorker.js","index.js"],"names":["App","props","state","array","this","resetArray","animations","animation","i","length","j","push","c","console","log","getAnimationsForBubbleSort","arrayBars","document","getElementsByClassName","barIndexOne","barIndexTwo","barOneFig","style","barTwoFig","color","setTimeout","backgroundColor","barIndexOneBef","prev","height","Math","floor","random","setState","className","map","elem","key","onClick","bubbleSort","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mQA8EeA,E,kDAzEb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,MAAM,IAHQ,E,gEAQhBC,KAAKC,e,mCAKL,IADA,IAAMC,ECjBH,SAAoCH,GAEvC,IADA,IAAMI,EAAU,GACRC,EAAE,EAAEA,EAAEL,EAAMM,OAAOD,IACvB,IAAI,IAAIE,EAAE,EAAEA,EAAEP,EAAMM,OAAOD,EAAE,EAAEE,IAI3B,GAFAH,EAAUI,KAAK,CAACD,EAAEA,EAAE,IACpBH,EAAUI,KAAK,CAACD,EAAEA,EAAE,IACjBP,EAAMO,GAAGP,EAAMO,EAAE,GAAG,CAEnBH,EAAUI,KAAK,CAACD,EAAE,EAAEA,IACpB,IAAIE,EAAIT,EAAMO,GACdP,EAAMO,GAAKP,EAAMO,EAAE,GACnBP,EAAMO,EAAE,GAAKE,OAGbL,EAAUI,KAAK,CAACD,EAAEA,EAAE,IAKhC,OADAG,QAAQC,IAAIP,GACLA,EDHYQ,CAA2BX,KAAKF,MAAMC,OACjDK,EAAE,EAAEA,EAAEF,EAAWG,OAAOD,IAAI,CAClC,IAAMQ,EAAYC,SAASC,uBAAuB,aAChCV,EAAI,IAAM,EACZ,WAAD,kBACsBF,EAAWE,GADjC,GACNW,EADM,KACOC,EADP,KAEPC,EAAYL,EAAUG,GAAaG,MACnCC,EAAYP,EAAUI,GAAaE,MACnCE,EAAQhB,EAAI,IAAM,EAAI,MAAQ,SACpCiB,YAAW,WACTJ,EAAUK,gBAAkBF,EAC5BD,EAAUG,gBAAkBF,IACvB,EAAJhB,GARW,GAUX,WAAD,kBACiCF,EAAWE,GAD5C,GACKW,EADL,KACkBC,EADlB,mBAEsCd,EAAWE,EAAE,GAFnD,GAEKmB,EAFL,KAGIN,GAHJ,KAGgBL,EAAUG,GAAaG,OACnCC,EAAYP,EAAUI,GAAaE,MACzCG,YAAW,WACV,GAAGN,IAAcQ,EAAe,CAC/B,IAAIC,EAAOP,EAAUQ,OACrBR,EAAUQ,OAASN,EAAUM,OAC7BN,EAAUM,OAASD,KAEd,EAAJpB,GAXA,M,mCAiBP,IADA,IAAML,EAAQ,GACNK,EAAE,EAAEA,EAAE,GAAGA,IACfL,EAAMQ,KAAKmB,KAAKC,MAAoB,IAAdD,KAAKE,UAAc,IAE3C5B,KAAK6B,SAAS,CAAC9B,Y,+BAER,IAAD,OACCA,EAASC,KAAKF,MAAdC,MACP,OACE,yBAAK+B,UAAU,mBACZ/B,EAAMgC,KAAI,SAACC,EAAK5B,GAAN,OACT,yBACE0B,UAAU,YACVG,IAAK,OAAO7B,EACZc,MACE,CACEI,gBAAgB,SAChBG,OAAO,GAAD,OAAIO,EAAJ,YAMd,6BACC,4BAAQE,QAAS,kBAAI,EAAKjC,eAA1B,SACA,4BAAQiC,QAAS,kBAAI,EAAKC,eAA1B,oB,GApESC,IAAMC,WEQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASiC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,a","file":"static/js/main.e66c3429.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {getAnimationsForBubbleSort} from './Algorithm/bubblesort.js';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      array:[],\n    };\n  }\n  \n  componentDidMount(){\n    this.resetArray();\n  }\n\n  bubbleSort(){\n    const animations = getAnimationsForBubbleSort(this.state.array);\n    for(let i=0;i<animations.length;i++){\n      const arrayBars = document.getElementsByClassName('array-bar');\n      let colorChange = i % 3 !== 2;\n      if(colorChange){\n        const [barIndexOne, barIndexTwo] = animations[i];\n        const barOneFig = arrayBars[barIndexOne].style;\n        const barTwoFig = arrayBars[barIndexTwo].style;\n        const color = i % 3 === 0 ? 'red' : 'orange';\n        setTimeout(() => {\n          barOneFig.backgroundColor = color;\n          barTwoFig.backgroundColor = color;\n        }, i * 1);\n      }\n      else{\n        const [barIndexOne, barIndexTwo] = animations[i];\n        const [barIndexOneBef,barIndexTwoBef] = animations[i-1];\n        const barOneFig = arrayBars[barIndexOne].style;\n        const barTwoFig = arrayBars[barIndexTwo].style;\n        setTimeout(() => {\n         if(barIndexOne!==barIndexOneBef){\n          let prev = barOneFig.height;\n          barOneFig.height = barTwoFig.height;\n          barTwoFig.height = prev;\n         }\n        }, i * 1);\n      }\n    }\n  }\n  resetArray(){\n    const array = [];\n    for(let i=0;i<50;i++){\n      array.push(Math.floor(Math.random()*800)+10);\n    }\n    this.setState({array});\n  }\n  render(){\n    const {array} = this.state; \n    return (\n      <div className=\"array-container\">\n        {array.map((elem,i)=>(\n          <div \n            className=\"array-bar\"\n            key={\"elem\"+i}\n            style = {\n              {\n                backgroundColor:\"orange\",\n                height:`${elem}px`\n              }\n            }\n          >\n          </div>\n        ))}\n        <br></br>\n         <button onClick={()=>this.resetArray()}>Reset</button>\n         <button onClick={()=>this.bubbleSort()}>Bubble-Sort</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export function getAnimationsForBubbleSort(array){\n    const animation=[];\n    for(let i=0;i<array.length;i++){\n        for(let j=0;j<array.length-i-1;j++){\n            //Push Twice For Color change.\n            animation.push([j,j+1]);\n            animation.push([j,j+1]);\n            if(array[j]>array[j+1]){\n                //Swapping has to happen in this case\n                animation.push([j+1,j]);\n                let c = array[j];\n                array[j] = array[j+1];\n                array[j+1] = c;\n            }\n            else{\n                animation.push([j,j+1]);\n            }\n        }\n    }\n    console.log(animation)\n    return animation;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}